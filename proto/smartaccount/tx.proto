syntax = "proto3";
package auranw.aura.smartaccount;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/crypto/secp256k1/keys.proto";

option go_package = "github.com/aura-nw/aura/x/smartaccount/types";

// Msg defines the Msg service.
service Msg {
  rpc CreateAccount(MsgCreateAccount) returns (MsgCreateAccountResponse);
  // this line is used by starport scaffolding # proto/tx/rpc
}

message MsgCreateAccount {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  // Sender is the actor who signs the message
  string creator = 1;

  // CodeID indicates which wasm binary code is to be used for this contract
  uint64 code_id = 2 [(gogoproto.customname) = "CodeID"];

  // InitMsg is the JSON-encoded instantiate message for the contract
  bytes init_msg = 3 [
    (gogoproto.customname) = "InitMsg",
    (gogoproto.casttype) = "github.com/CosmWasm/wasmd/x/wasm/types.RawContractMessage"
  ];

  // PubKey using for signature verification of this account
  cosmos.crypto.secp256k1.PubKey public_key = 4 [
    (gogoproto.nullable)     = false,
    (gogoproto.customname) = "PubKey"
  ];

  // Funds are coins to be deposited to the contract on instantiattion
  repeated cosmos.base.v1beta1.Coin funds = 5 [
    (gogoproto.nullable)     = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];

  // Salt is an arbinary value to be used in deriving the account address.
  // Max 64 bytes.
  bytes salt = 6;
}

message MsgCreateAccountResponse {
  string address = 1;
  bytes data = 2;
}

/* message MsgUpdateKey {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  // Sender is the actor who signs the message
  string creator = 1;

  // smart-account address that need update
  string address = 2;

  // PubKey using for signature verification of this account
  cosmos.crypto.secp256k1.PubKey public_key = 4 [
    (gogoproto.nullable)     = false,
    (gogoproto.customname) = "PubKey"
  ];
}

message MsgCreateAccountResponse {
  string address = 1;

  string new_public_key = 2 [(gogoproto.customname) = "NewPubKey"];
} */
