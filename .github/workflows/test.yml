name: go-test
on:
  push:
    branches:
      - dev
      - serenity
      - euphoria
  pull_request:
permissions:
  contents: read
  # Optional: allow read access to pull request. Use with `only-new-issues` option.
  # pull-requests: read
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.19

    - name: Build
      run: go build -v ./...

    - name: Test
      run: go test -v ./...
  test-coverage-upload:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.1.0
      - uses: technote-space/get-diff-action@v6.1.1
        with:
          PATTERNS: |
            **/**.go
            go.mod
            go.sum
      - uses: actions/cache@v3.2.0
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.mod') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - uses: actions/setup-go@v3.3.1
        with:
          go-version: 1.19
      - name: test & coverage report creation
        run: |
          go test -v -coverprofile=coverage.txt -covermode=atomic -coverpkg=./... $(go list ./... | grep -v -e '/tests')
      - name: filter non-testable files
        run: |
          excludelist="$(find ./ -type f -name '*.go' | xargs grep -l 'DONTCOVER')"
          excludelist+=" $(find ./ -type f -name '*.pb.go')"
          excludelist+=" $(find ./ -type f -name '*.pb.gw.go')"
          excludelist+=" $(find ./cmd -type d)"
          excludelist+=" $(find ./tests -type d)"
          for filename in ${excludelist}; do
            filename=${filename#".//"}
            echo "Excluding ${filename} from coverage report..."
            filename=$(echo "$filename" | sed 's/\//\\\//g')
            sed -i.bak "/""$filename""/d" coverage.txt
          done
      - uses: codecov/codecov-action@v3.1.1
        with:
          file: ./coverage.txt
          fail_ci_if_error: true