// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: distribution/epoch_vote_info.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/tendermint/tendermint/abci/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EpochVoteInfo struct {
	Validator      types.Validator `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator"`
	ProposerBlocks int64           `protobuf:"varint,2,opt,name=proposer_blocks,json=proposerBlocks,proto3" json:"proposer_blocks,omitempty"`
	ActiveBlocks   int64           `protobuf:"varint,3,opt,name=active_blocks,json=activeBlocks,proto3" json:"active_blocks,omitempty"`
	TotalPower     int64           `protobuf:"varint,4,opt,name=total_power,json=totalPower,proto3" json:"total_power,omitempty"`
}

func (m *EpochVoteInfo) Reset()         { *m = EpochVoteInfo{} }
func (m *EpochVoteInfo) String() string { return proto.CompactTextString(m) }
func (*EpochVoteInfo) ProtoMessage()    {}
func (*EpochVoteInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d863eda70fc0a961, []int{0}
}
func (m *EpochVoteInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EpochVoteInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EpochVoteInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EpochVoteInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochVoteInfo.Merge(m, src)
}
func (m *EpochVoteInfo) XXX_Size() int {
	return m.Size()
}
func (m *EpochVoteInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochVoteInfo.DiscardUnknown(m)
}

var xxx_messageInfo_EpochVoteInfo proto.InternalMessageInfo

func (m *EpochVoteInfo) GetValidator() types.Validator {
	if m != nil {
		return m.Validator
	}
	return types.Validator{}
}

func (m *EpochVoteInfo) GetProposerBlocks() int64 {
	if m != nil {
		return m.ProposerBlocks
	}
	return 0
}

func (m *EpochVoteInfo) GetActiveBlocks() int64 {
	if m != nil {
		return m.ActiveBlocks
	}
	return 0
}

func (m *EpochVoteInfo) GetTotalPower() int64 {
	if m != nil {
		return m.TotalPower
	}
	return 0
}

type ListEpochVoteInfo struct {
	ListEpochVoteInfo []*EpochVoteInfo `protobuf:"bytes,1,rep,name=list_epoch_vote_info,json=listEpochVoteInfo,proto3" json:"list_epoch_vote_info,omitempty"`
}

func (m *ListEpochVoteInfo) Reset()         { *m = ListEpochVoteInfo{} }
func (m *ListEpochVoteInfo) String() string { return proto.CompactTextString(m) }
func (*ListEpochVoteInfo) ProtoMessage()    {}
func (*ListEpochVoteInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d863eda70fc0a961, []int{1}
}
func (m *ListEpochVoteInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListEpochVoteInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListEpochVoteInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListEpochVoteInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListEpochVoteInfo.Merge(m, src)
}
func (m *ListEpochVoteInfo) XXX_Size() int {
	return m.Size()
}
func (m *ListEpochVoteInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ListEpochVoteInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ListEpochVoteInfo proto.InternalMessageInfo

func (m *ListEpochVoteInfo) GetListEpochVoteInfo() []*EpochVoteInfo {
	if m != nil {
		return m.ListEpochVoteInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*EpochVoteInfo)(nil), "auranw.aura.distribution.EpochVoteInfo")
	proto.RegisterType((*ListEpochVoteInfo)(nil), "auranw.aura.distribution.ListEpochVoteInfo")
}

func init() {
	proto.RegisterFile("distribution/epoch_vote_info.proto", fileDescriptor_d863eda70fc0a961)
}

var fileDescriptor_d863eda70fc0a961 = []byte{
	// 335 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xc1, 0x4b, 0x3a, 0x41,
	0x14, 0xc7, 0x77, 0x7e, 0xca, 0x0f, 0x1a, 0xb3, 0x70, 0xf1, 0xb0, 0x18, 0xac, 0x62, 0x07, 0x3d,
	0xd4, 0x0c, 0xd8, 0xbd, 0x83, 0x50, 0x10, 0x74, 0x08, 0x0f, 0x12, 0x5d, 0x96, 0xd9, 0x75, 0xd4,
	0xa1, 0x75, 0xde, 0x32, 0xfb, 0xd4, 0xfa, 0x2f, 0xfa, 0x8b, 0x3a, 0x7b, 0xf4, 0xd8, 0x29, 0x42,
	0xff, 0x91, 0x98, 0x31, 0x31, 0x85, 0x4e, 0xef, 0xf1, 0xe1, 0xf3, 0xbe, 0xc3, 0xbc, 0x47, 0x9b,
	0x03, 0x95, 0xa3, 0x51, 0xf1, 0x14, 0x15, 0x68, 0x2e, 0x33, 0x48, 0xc6, 0xd1, 0x0c, 0x50, 0x46,
	0x4a, 0x0f, 0x81, 0x65, 0x06, 0x10, 0xfc, 0x40, 0x4c, 0x8d, 0xd0, 0x73, 0x66, 0x0b, 0xfb, 0xed,
	0xd7, 0xce, 0x50, 0xea, 0x81, 0x34, 0x13, 0xa5, 0x91, 0x8b, 0x38, 0x51, 0x1c, 0x5f, 0x33, 0x99,
	0x6f, 0xc6, 0x6a, 0xd5, 0x11, 0x8c, 0xc0, 0xb5, 0xdc, 0x76, 0x1b, 0xda, 0x7c, 0x27, 0xb4, 0x7c,
	0x63, 0x9f, 0xe9, 0x03, 0xca, 0x3b, 0x3d, 0x04, 0xff, 0x9a, 0x1e, 0xcd, 0x44, 0xaa, 0x06, 0x02,
	0xc1, 0x04, 0xa4, 0x41, 0xda, 0xa5, 0x4e, 0x8d, 0xed, 0x82, 0x99, 0x0d, 0x66, 0xfd, 0xad, 0xd1,
	0x2d, 0x2e, 0x3e, 0xeb, 0x5e, 0x6f, 0x37, 0xe2, 0xb7, 0xe8, 0x69, 0x66, 0x20, 0x83, 0x5c, 0x9a,
	0x28, 0x4e, 0x21, 0x79, 0xce, 0x83, 0x7f, 0x0d, 0xd2, 0x2e, 0xf4, 0x4e, 0xb6, 0xb8, 0xeb, 0xa8,
	0x7f, 0x4e, 0xcb, 0x22, 0x41, 0x35, 0x93, 0x5b, 0xad, 0xe0, 0xb4, 0xe3, 0x0d, 0xfc, 0x91, 0xea,
	0xb4, 0x84, 0x80, 0x22, 0x8d, 0x32, 0x98, 0x4b, 0x13, 0x14, 0x9d, 0x42, 0x1d, 0x7a, 0xb0, 0xa4,
	0x39, 0xa1, 0x95, 0x7b, 0x95, 0xe3, 0xfe, 0x1f, 0x1e, 0x69, 0x35, 0x55, 0x39, 0x46, 0x07, 0x0b,
	0x0c, 0x48, 0xa3, 0xd0, 0x2e, 0x75, 0x5a, 0xec, 0xaf, 0x0d, 0xb2, 0xbd, 0x98, 0x5e, 0x25, 0x3d,
	0x4c, 0xee, 0xde, 0x2e, 0x56, 0x21, 0x59, 0xae, 0x42, 0xf2, 0xb5, 0x0a, 0xc9, 0xdb, 0x3a, 0xf4,
	0x96, 0xeb, 0xd0, 0xfb, 0x58, 0x87, 0xde, 0xd3, 0xc5, 0x48, 0xe1, 0x78, 0x1a, 0xb3, 0x04, 0x26,
	0xdc, 0x06, 0x5f, 0xea, 0xb9, 0xab, 0xfc, 0x85, 0xef, 0x1d, 0xd5, 0xdd, 0x24, 0xfe, 0xef, 0xd6,
	0x7f, 0xf5, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x50, 0x55, 0x95, 0x2b, 0xf1, 0x01, 0x00, 0x00,
}

func (m *EpochVoteInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EpochVoteInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EpochVoteInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalPower != 0 {
		i = encodeVarintEpochVoteInfo(dAtA, i, uint64(m.TotalPower))
		i--
		dAtA[i] = 0x20
	}
	if m.ActiveBlocks != 0 {
		i = encodeVarintEpochVoteInfo(dAtA, i, uint64(m.ActiveBlocks))
		i--
		dAtA[i] = 0x18
	}
	if m.ProposerBlocks != 0 {
		i = encodeVarintEpochVoteInfo(dAtA, i, uint64(m.ProposerBlocks))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Validator.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEpochVoteInfo(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ListEpochVoteInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListEpochVoteInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListEpochVoteInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ListEpochVoteInfo) > 0 {
		for iNdEx := len(m.ListEpochVoteInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ListEpochVoteInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEpochVoteInfo(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintEpochVoteInfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovEpochVoteInfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EpochVoteInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Validator.Size()
	n += 1 + l + sovEpochVoteInfo(uint64(l))
	if m.ProposerBlocks != 0 {
		n += 1 + sovEpochVoteInfo(uint64(m.ProposerBlocks))
	}
	if m.ActiveBlocks != 0 {
		n += 1 + sovEpochVoteInfo(uint64(m.ActiveBlocks))
	}
	if m.TotalPower != 0 {
		n += 1 + sovEpochVoteInfo(uint64(m.TotalPower))
	}
	return n
}

func (m *ListEpochVoteInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ListEpochVoteInfo) > 0 {
		for _, e := range m.ListEpochVoteInfo {
			l = e.Size()
			n += 1 + l + sovEpochVoteInfo(uint64(l))
		}
	}
	return n
}

func sovEpochVoteInfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEpochVoteInfo(x uint64) (n int) {
	return sovEpochVoteInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EpochVoteInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEpochVoteInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EpochVoteInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EpochVoteInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochVoteInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEpochVoteInfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEpochVoteInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Validator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposerBlocks", wireType)
			}
			m.ProposerBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochVoteInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposerBlocks |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveBlocks", wireType)
			}
			m.ActiveBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochVoteInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveBlocks |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPower", wireType)
			}
			m.TotalPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochVoteInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalPower |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEpochVoteInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEpochVoteInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListEpochVoteInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEpochVoteInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListEpochVoteInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListEpochVoteInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListEpochVoteInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochVoteInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEpochVoteInfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEpochVoteInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ListEpochVoteInfo = append(m.ListEpochVoteInfo, &EpochVoteInfo{})
			if err := m.ListEpochVoteInfo[len(m.ListEpochVoteInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEpochVoteInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEpochVoteInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEpochVoteInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEpochVoteInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEpochVoteInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEpochVoteInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEpochVoteInfo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEpochVoteInfo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEpochVoteInfo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEpochVoteInfo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEpochVoteInfo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEpochVoteInfo = fmt.Errorf("proto: unexpected end of group")
)
