syntax = "proto3";
package aura.smartaccount;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "aura/smartaccount/params.proto";
import "google/protobuf/any.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/aura-nw/aura/x/smartaccount/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/aura/smartaccount/params";
  }
  // Queries a list of GenerateAccount items.
	rpc GenerateAccount(QueryGenerateAccountRequest) returns (QueryGenerateAccountResponse) {
		option (google.api.http).get = "/aura/smartaccount/generate_account";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGenerateAccountRequest {
  // CodeID indicates which wasm binary code is to be used for creating account
  uint64 code_id = 1 [(gogoproto.customname) = "CodeID"];

  // an arbitrary value provided by the sender. Size can be 1 to 64.
  bytes salt = 2;

  // InitMsg is the JSON-encoded instantiate message for creating account
  bytes init_msg = 3 [
    (gogoproto.customname) = "InitMsg",
    (gogoproto.casttype) = "github.com/CosmWasm/wasmd/x/wasm/types.RawContractMessage"
  ];

  // PubKey of account
  google.protobuf.Any public_key = 4 [(gogoproto.customname) = "PubKey"];
}

message QueryGenerateAccountResponse {
  string address = 1;
}

// this line is used by starport scaffolding # 3
