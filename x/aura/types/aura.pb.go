// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: auranw/aura/aura.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the aura module.
type Params struct {
	// max_supply defines the max supply of aura coin.
	MaxSupply              string   `protobuf:"bytes,1,opt,name=max_supply,json=maxSupply,proto3" json:"max_supply,omitempty" yaml:"max_supply"`
	ExcludeCirculatingAddr []string `protobuf:"bytes,2,rep,name=exclude_circulating_addr,json=excludeCirculatingAddr,proto3" json:"exclude_circulating_addr,omitempty" yaml:"exclude_circulating_addr"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_968a0a6d5d19648c, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetMaxSupply() string {
	if m != nil {
		return m.MaxSupply
	}
	return ""
}

func (m *Params) GetExcludeCirculatingAddr() []string {
	if m != nil {
		return m.ExcludeCirculatingAddr
	}
	return nil
}

func init() {
	proto.RegisterType((*Params)(nil), "auranw.aura.Params")
}

func init() { proto.RegisterFile("auranw/aura/aura.proto", fileDescriptor_968a0a6d5d19648c) }

var fileDescriptor_968a0a6d5d19648c = []byte{
	// 230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4b, 0x2c, 0x2d, 0x4a,
	0xcc, 0x2b, 0xd7, 0x07, 0x51, 0x60, 0x42, 0xaf, 0xa0, 0x28, 0xbf, 0x24, 0x5f, 0x88, 0x1b, 0x22,
	0xae, 0x07, 0xa2, 0xa4, 0x44, 0xd2, 0xf3, 0xd3, 0xf3, 0xc1, 0xe2, 0xfa, 0x20, 0x16, 0x44, 0x89,
	0xd2, 0x5c, 0x46, 0x2e, 0xb6, 0x80, 0xc4, 0xa2, 0xc4, 0xdc, 0x62, 0x21, 0x13, 0x2e, 0xae, 0xdc,
	0xc4, 0x8a, 0xf8, 0xe2, 0xd2, 0x82, 0x82, 0x9c, 0x4a, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x4e, 0x27,
	0xd1, 0x4f, 0xf7, 0xe4, 0x05, 0x2b, 0x13, 0x73, 0x73, 0xac, 0x94, 0x10, 0x72, 0x4a, 0x41, 0x9c,
	0xb9, 0x89, 0x15, 0xc1, 0x60, 0xb6, 0x50, 0x2c, 0x97, 0x44, 0x6a, 0x45, 0x72, 0x4e, 0x69, 0x4a,
	0x6a, 0x7c, 0x72, 0x66, 0x51, 0x72, 0x69, 0x4e, 0x62, 0x49, 0x66, 0x5e, 0x7a, 0x7c, 0x62, 0x4a,
	0x4a, 0x91, 0x04, 0x93, 0x02, 0xb3, 0x06, 0xa7, 0x93, 0xf2, 0xa7, 0x7b, 0xf2, 0xf2, 0x10, 0x33,
	0x70, 0xa9, 0x54, 0x0a, 0x12, 0x83, 0x4a, 0x39, 0x23, 0x64, 0x1c, 0x53, 0x52, 0x8a, 0x9c, 0xec,
	0x4e, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5,
	0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0x4a, 0x25, 0x3d, 0xb3, 0x24, 0xa3,
	0x34, 0x49, 0x2f, 0x39, 0x3f, 0x17, 0xec, 0x67, 0x5d, 0x58, 0x00, 0x54, 0x40, 0xa8, 0x92, 0xca,
	0x82, 0xd4, 0xe2, 0x24, 0x36, 0xb0, 0x37, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb2, 0xe1,
	0xd4, 0xc7, 0x23, 0x01, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExcludeCirculatingAddr) > 0 {
		for iNdEx := len(m.ExcludeCirculatingAddr) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExcludeCirculatingAddr[iNdEx])
			copy(dAtA[i:], m.ExcludeCirculatingAddr[iNdEx])
			i = encodeVarintAura(dAtA, i, uint64(len(m.ExcludeCirculatingAddr[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.MaxSupply) > 0 {
		i -= len(m.MaxSupply)
		copy(dAtA[i:], m.MaxSupply)
		i = encodeVarintAura(dAtA, i, uint64(len(m.MaxSupply)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAura(dAtA []byte, offset int, v uint64) int {
	offset -= sovAura(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MaxSupply)
	if l > 0 {
		n += 1 + l + sovAura(uint64(l))
	}
	if len(m.ExcludeCirculatingAddr) > 0 {
		for _, s := range m.ExcludeCirculatingAddr {
			l = len(s)
			n += 1 + l + sovAura(uint64(l))
		}
	}
	return n
}

func sovAura(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAura(x uint64) (n int) {
	return sovAura(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAura
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSupply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAura
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAura
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAura
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxSupply = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludeCirculatingAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAura
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAura
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAura
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExcludeCirculatingAddr = append(m.ExcludeCirculatingAddr, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAura(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAura
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAura(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAura
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAura
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAura
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAura
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAura
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAura
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAura        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAura          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAura = fmt.Errorf("proto: unexpected end of group")
)
