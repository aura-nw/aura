// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: aura/smartaccount/v1/params.proto

package v1

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CodeID struct {
	// whitelist code id
	CodeID uint64 `protobuf:"varint,1,opt,name=code_id,json=codeId,proto3" json:"code_id,omitempty"`
	// status of code id
	Status bool `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *CodeID) Reset()         { *m = CodeID{} }
func (m *CodeID) String() string { return proto.CompactTextString(m) }
func (*CodeID) ProtoMessage()    {}
func (*CodeID) Descriptor() ([]byte, []int) {
	return fileDescriptor_a05863226dce7ae4, []int{0}
}
func (m *CodeID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CodeID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CodeID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CodeID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CodeID.Merge(m, src)
}
func (m *CodeID) XXX_Size() int {
	return m.Size()
}
func (m *CodeID) XXX_DiscardUnknown() {
	xxx_messageInfo_CodeID.DiscardUnknown(m)
}

var xxx_messageInfo_CodeID proto.InternalMessageInfo

func (m *CodeID) GetCodeID() uint64 {
	if m != nil {
		return m.CodeID
	}
	return 0
}

func (m *CodeID) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

// Params defines the parameters for the module.
type Params struct {
	// code_id whitelist indicates which contract can be initialized as smart account
	// using gov proposal for updates
	WhitelistCodeID []*CodeID `protobuf:"bytes,1,rep,name=whitelist_code_id,json=whitelistCodeId,proto3" json:"whitelist_code_id,omitempty"`
	// list of diable messages for smartaccount
	DisableMsgsList []string `protobuf:"bytes,2,rep,name=disable_msgs_list,json=disableMsgsList,proto3" json:"disable_msgs_list,omitempty"`
	// limit how much gas can be consumed by the `pre_execute` method
	MaxGasExecute uint64 `protobuf:"varint,3,opt,name=max_gas_execute,json=maxGasExecute,proto3" json:"max_gas_execute,omitempty"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_a05863226dce7ae4, []int{1}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetWhitelistCodeID() []*CodeID {
	if m != nil {
		return m.WhitelistCodeID
	}
	return nil
}

func (m *Params) GetDisableMsgsList() []string {
	if m != nil {
		return m.DisableMsgsList
	}
	return nil
}

func (m *Params) GetMaxGasExecute() uint64 {
	if m != nil {
		return m.MaxGasExecute
	}
	return 0
}

func init() {
	proto.RegisterType((*CodeID)(nil), "aura.smartaccount.v1.CodeID")
	proto.RegisterType((*Params)(nil), "aura.smartaccount.v1.Params")
}

func init() { proto.RegisterFile("aura/smartaccount/v1/params.proto", fileDescriptor_a05863226dce7ae4) }

var fileDescriptor_a05863226dce7ae4 = []byte{
	// 352 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x3f, 0x4b, 0xc3, 0x40,
	0x18, 0xc6, 0x73, 0x6d, 0x89, 0x7a, 0x52, 0x42, 0x63, 0x91, 0x20, 0x92, 0xd4, 0xba, 0x64, 0x31,
	0x47, 0x75, 0xb2, 0x8b, 0x50, 0x2b, 0x52, 0xb4, 0x20, 0x59, 0x04, 0x41, 0xc2, 0x35, 0x39, 0xd2,
	0x40, 0xd3, 0x2b, 0x79, 0x2f, 0x6d, 0xfc, 0x16, 0x8e, 0x8e, 0xfd, 0x38, 0x8e, 0x1d, 0x9d, 0x8a,
	0xa4, 0x8b, 0x7e, 0x0b, 0x49, 0x52, 0xb1, 0x05, 0xa7, 0xbb, 0xf7, 0xfd, 0x3d, 0xef, 0x3f, 0x1e,
	0x7c, 0x42, 0xe3, 0x88, 0x12, 0x08, 0x69, 0x24, 0xa8, 0xeb, 0xf2, 0x78, 0x2c, 0xc8, 0xb4, 0x45,
	0x26, 0x34, 0xa2, 0x21, 0x58, 0x93, 0x88, 0x0b, 0xae, 0xd6, 0x33, 0x89, 0xb5, 0x29, 0xb1, 0xa6,
	0xad, 0xa3, 0xba, 0xcf, 0x7d, 0x9e, 0x0b, 0x48, 0xf6, 0x2b, 0xb4, 0xcd, 0x3b, 0x2c, 0x5f, 0x73,
	0x8f, 0xf5, 0xba, 0xea, 0x29, 0xde, 0x71, 0xb9, 0xc7, 0x9c, 0xc0, 0xd3, 0x50, 0x03, 0x99, 0x95,
	0x0e, 0x4e, 0x97, 0xc6, 0x1a, 0xda, 0x72, 0x86, 0x7a, 0x9e, 0x7a, 0x88, 0x65, 0x10, 0x54, 0xc4,
	0xa0, 0x95, 0x1a, 0xc8, 0xdc, 0xb5, 0xd7, 0x51, 0xbb, 0xf2, 0x35, 0x37, 0x50, 0xf3, 0x1b, 0x61,
	0xf9, 0x21, 0xdf, 0x44, 0x7d, 0xc6, 0xb5, 0xd9, 0x30, 0x10, 0x6c, 0x14, 0x80, 0x70, 0xfe, 0xfa,
	0x96, 0xcd, 0xfd, 0xf3, 0x63, 0xeb, 0xbf, 0xfd, 0xac, 0x62, 0x52, 0xe7, 0x20, 0x5d, 0x1a, 0xca,
	0xe3, 0x6f, 0xe9, 0x7a, 0xbc, 0x32, 0xdb, 0x4a, 0x78, 0xea, 0x15, 0xae, 0x79, 0x01, 0xd0, 0xc1,
	0x88, 0x39, 0x21, 0xf8, 0xe0, 0x64, 0x48, 0x2b, 0x35, 0xca, 0xe6, 0x5e, 0xd1, 0xa0, 0x5b, 0xc0,
	0x3e, 0xf8, 0x70, 0x1f, 0x80, 0xb0, 0x15, 0x6f, 0x3b, 0xa1, 0x5e, 0x62, 0x25, 0xa4, 0x89, 0xe3,
	0x53, 0x70, 0x58, 0xc2, 0xdc, 0x58, 0x30, 0xad, 0x9c, 0x5f, 0x5d, 0x4b, 0x97, 0x46, 0xb5, 0x4f,
	0x93, 0x5b, 0x0a, 0x37, 0x05, 0xb0, 0xab, 0xe1, 0x66, 0xd8, 0xae, 0xbc, 0xcd, 0x0d, 0xa9, 0xd3,
	0x7b, 0x4f, 0x75, 0xb4, 0x48, 0x75, 0xf4, 0x99, 0xea, 0xe8, 0x75, 0xa5, 0x4b, 0x8b, 0x95, 0x2e,
	0x7d, 0xac, 0x74, 0xe9, 0x89, 0xf8, 0x81, 0x18, 0xc6, 0x03, 0xcb, 0xe5, 0x21, 0xc9, 0x2e, 0x3d,
	0x1b, 0xcf, 0xf2, 0x97, 0x24, 0xdb, 0xb6, 0x89, 0x97, 0x09, 0x03, 0x32, 0x6d, 0x0d, 0xe4, 0xdc,
	0x8a, 0x8b, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x68, 0xba, 0x36, 0xa8, 0xdb, 0x01, 0x00, 0x00,
}

func (this *CodeID) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CodeID)
	if !ok {
		that2, ok := that.(CodeID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CodeID != that1.CodeID {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (m *CodeID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CodeID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CodeID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status {
		i--
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.CodeID != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.CodeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxGasExecute != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxGasExecute))
		i--
		dAtA[i] = 0x18
	}
	if len(m.DisableMsgsList) > 0 {
		for iNdEx := len(m.DisableMsgsList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DisableMsgsList[iNdEx])
			copy(dAtA[i:], m.DisableMsgsList[iNdEx])
			i = encodeVarintParams(dAtA, i, uint64(len(m.DisableMsgsList[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.WhitelistCodeID) > 0 {
		for iNdEx := len(m.WhitelistCodeID) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WhitelistCodeID[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CodeID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CodeID != 0 {
		n += 1 + sovParams(uint64(m.CodeID))
	}
	if m.Status {
		n += 2
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.WhitelistCodeID) > 0 {
		for _, e := range m.WhitelistCodeID {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if len(m.DisableMsgsList) > 0 {
		for _, s := range m.DisableMsgsList {
			l = len(s)
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if m.MaxGasExecute != 0 {
		n += 1 + sovParams(uint64(m.MaxGasExecute))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CodeID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CodeID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CodeID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeID", wireType)
			}
			m.CodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CodeID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhitelistCodeID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WhitelistCodeID = append(m.WhitelistCodeID, &CodeID{})
			if err := m.WhitelistCodeID[len(m.WhitelistCodeID)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableMsgsList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisableMsgsList = append(m.DisableMsgsList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxGasExecute", wireType)
			}
			m.MaxGasExecute = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxGasExecute |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
