# This workflow is useful if you want to automate the process of:
#
# a) Creating a new prelease when you push a new tag with a "v" prefix (version).
#
#    This type of prerelease is meant to be used for production: alpha, beta, rc, etc. types of releases.
#    After the prerelease is created, you need to make your changes on the release page at the relevant
#    Github page and publish your release.
#
# b) Creating/updating the "latest" prerelease when you push to your default branch.
#
#    This type of prelease is useful to make your bleeding-edge binaries available to advanced users.
#
# The workflow will not run if there is no tag pushed with a "v" prefix and no change pushed to your 
# default branch.
on: 
  push:
    branches:
    - dev
    - halo
    - serenity
    - euphoria

jobs:
  might_release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
        
      - name: Set variables
        run: |
          VER=$(cat .VERSION)-${{ github.head_ref || github.ref_name }}
          echo "VERSION=$VER" >> $GITHUB_ENV
      
      - uses: mukunku/tag-exists-action@v1.4.0
        id: checkTag
        with: 
          tag: ${{ env.VERSION }}

      - name: exit
        if: ${{ steps.checkTag.outputs.exists }} != false 
        run: |
          echo ${{ steps.checkTag.outputs.exists }}
          exit 1

      - name: Delete the "latest" Pre-Release
        uses: dev-drprasad/delete-older-releases@v0.2.0
        with:
          keep_latest: 0
          delete_tag_pattern: .*-${{ github.head_ref || github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2  
      
      - name: Publish the Pre-Release
        run: make release
        env:
          PRE_RELEASE: true
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
